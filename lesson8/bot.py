import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from steps import TrafficLights
from keyboards import lights, redkb, yellowkb, greenkb, traffic_off_kb
from config import TOKEN


logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands='start')
async def start_process(message: types.Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç - —ñ–∑ –º–∞—à–∏–Ω–∞–º–∏ —Å—Ç–∞–Ω—ñ–≤')


@dp.message_handler(commands='traffic_light_on')
async def traffic_light_on(message: types.Message):
    await TrafficLights.StateOn.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Äüö¶\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –±—É–¥—å-—è–∫–µ —Å–≤—ñ—Ç–ª–æ:',
                         reply_markup=lights)


@dp.message_handler(text='–ß–µ—Ä–≤–æ–Ω–∏–π üî¥', state=TrafficLights.StateOn)
async def traffic_red(message: types.Message):
    await TrafficLights.StateRed.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ —á–µ—Ä–≤–æ–Ω–µ —Å–≤—ñ—Ç–ª–æ üî¥\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∂–æ–≤—Ç–µ:',
                         reply_markup=yellowkb)
    

@dp.message_handler(text='–ñ–æ–≤—Ç–∏–π üü°', state=TrafficLights.StateRed)
async def traffic_yellow(message: types.Message):
    await TrafficLights.StateYellow.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ –∂–æ–≤—Ç–µ —Å–≤—ñ—Ç–ª–æ üü°\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–µ–ª–µ–Ω–µ:',
                         reply_markup=greenkb)


@dp.message_handler(text='–ó–µ–ª–µ–Ω–∏–π üü¢', state=TrafficLights.StateYellow)
async def traffic_green(message: types.Message):
    await TrafficLights.StateGreen.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ –∑–µ–ª–µ–Ω–µ —Å–≤—ñ—Ç–ª–æ üü¢\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä:',
                         reply_markup=traffic_off_kb)
    

@dp.message_handler(text='–í–∏–º–∫–Ω—É—Ç–∏', state=TrafficLights.StateGreen)
async def traffic_off(message: types.Message):
    await dp.current_state().reset_state()
    await message.answer('–í–∏ –≤–∏–º–∫–Ω—É–ª–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä.\n'
                         '–©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏ - /traffic_light_on')


if __name__=='__main__':
    executor.start_polling(dp)